name: Deploy to ECR

on:
  push:
    branches: [ master ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Setup Java JDK
      uses: actions/setup-java@v1.4.4
      with:
        java-version: '8'
   
    - name: Run Tests
      run: |
        python tests/test_neura.py

  cd:   
    name: Deploy on AWS
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ needs.ci.result == 'success' }} # Run only if the build job is successful

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: neuralint_handler
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "LAMBDA_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_ENV"
    - name: Update Lambda code
      id: update-lambda
      env: 
        IMAGE_URI: ${{ env.LAMBDA_IMAGE_URI }}
        FUNCTION_NAME: ${{ secrets.FUNCTION_ARN }} 
      run: |
        aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI